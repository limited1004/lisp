;
;------------------------------------------------------------------------------
;
;Задача 2
;Определите функицонал (MAPLIST fn список) для одного списочного аргумента

(defun maplist1 (fn lst)

          (cond 
             ((null fn) nil)
             ((null lst) nil)
            
             (t(cons (funcall fn lst)   (maplist1 fn (cdr lst))))    ;->((3 2 1) (3 2) (3)) 
          )
)

;
;------------------------------------------------------------------------------
;
(print (maplist1 'REVERSE '(1 2 3)))
(print (maplist1 'list '(1 2 3)))


;
;------------------------------------------------------------------------------
;
;Задача 6
;Определите фильтр (УДАЛйЬ-ЕСЛИ пред список), удаляющий из списка список
;все элементы, которые обладают свойством, наличие которого проверяет предикат пред.

(defun удалить-если (pred l)
    (mapcan (function (lambda (x)
                              (if (funcall pred x) (list x) nil)))
            l))
;
;------------------------------------------------------------------------------
;
(print(удалить-если 'evenp '( 1 2 3 4 5 )))
(print(удалить-если 'numberp '( a 1 b 2 c 3)))
(print (удалить-если (lambda (x) (> x 2)) '(3 1 2)))

;
;------------------------------------------------------------------------------
;
;Задача 8
;Напишите генератор натуральных чисел: 0, 1, 2, 3, 4, 5, ...

(defun удалить-если (pred l)
    (mapcan (function (lambda (x)
                              (if (funcall pred x) (list x) nil)))
            l))
;
;------------------------------------------------------------------------------
;
(print(удалить-если 'evenp '( 1 2 3 4 5 )))
(print(удалить-если 'numberp '( a 1 b 2 c 3)))
(print (удалить-если (lambda (x) (> x 2)) '(3 1 2)))

;
;------------------------------------------------------------------------------
;

;Задача 12
;Определите функцию, которая возвращает в качестве значения свой вызов.
(defun свой-вызов (&rest args)
    (list 'apply 'свой-вызов args))

;------------------------------------------------------------------------------
;
(print (свой-вызов 1 2)) 
(print (свой-вызов 'l 1 2)) 
(print (свой-вызов '(l r t)))
